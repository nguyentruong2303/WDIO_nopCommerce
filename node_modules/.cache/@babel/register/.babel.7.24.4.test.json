{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\t002404\\\\OneDrive - Cybozu\\\\デスクトップ\\\\Automation MailSource\\\\Nop-ecommerce\\\\WDIO_nopCommerce\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\t002404\\\\OneDrive - Cybozu\\\\デスクトップ\\\\Automation MailSource\\\\Nop-ecommerce\\\\WDIO_nopCommerce\",\"filename\":\"C:\\\\Users\\\\t002404\\\\OneDrive - Cybozu\\\\デスクトップ\\\\Automation MailSource\\\\Nop-ecommerce\\\\WDIO_nopCommerce\\\\wdio.conf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"C:\\\\Users\\\\t002404\\\\OneDrive - Cybozu\\\\デスクトップ\\\\Automation MailSource\\\\Nop-ecommerce\\\\WDIO_nopCommerce\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"CallExpression\":{\"enter\":[null]},\"ImportExpression\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.24.4:test":{"value":{"code":"\"use strict\";\n\nexports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  // WebdriverIO supports running e2e tests as well as unit and component tests.\n  runner: 'local',\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // of the configuration file being run.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // The path of the spec files will be resolved relative from the directory of\n  // of the config file unless it's absolute.\n  //\n  specs: ['./src/test_specs/**/*.js'],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [{\n    browserName: 'chrome'\n  }],\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: 'info',\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: 'https://demo.nopcommerce.com',\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n  // services: [],\n  //\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: 'mocha',\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: ['spec', ['allure', {\n    outputDir: 'allure-results'\n  }]],\n  // Options to be passed to Mocha.\n  // See the full list at http://mochajs.org/\n  mochaOpts: {\n    require: ['@babel/register'],\n    ui: 'bdd',\n    timeout: 60000\n  },\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialize specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {object} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {number} exitCode 0 - success, 1 - fail\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {string} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Hook that gets executed before the suite starts\n   * @param {object} suite suite details\n   */\n  // beforeSuite: function (suite) {\n  // },\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n   * beforeEach in Mocha)\n   */\n  // beforeHook: function (test, context, hookName) {\n  // },\n  /**\n   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n   * afterEach in Mocha)\n   */\n  // afterHook: function (test, context, { error, result, duration, passed, retries }, hookName) {\n  // },\n  /**\n   * Function to be executed after a test (in Mocha/Jasmine only)\n   * @param {object}  test             test object\n   * @param {object}  context          scope object the test was executed with\n   * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n   * @param {*}       result.result    return object of test function\n   * @param {number}  result.duration  duration of test\n   * @param {boolean} result.passed    true if test has passed, otherwise false\n   * @param {object}  result.retries   information about spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n   */\n  afterTest: async function (test, context, {\n    error,\n    result,\n    duration,\n    passed,\n    retries\n  }) {\n    if (!passed) {\n      await browser.takeScreenshot();\n    }\n  }\n\n  /**\n   * Hook that gets executed after the suite has ended\n   * @param {object} suite suite details\n   */\n  // afterSuite: function (suite) {\n  // },\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {number} result 0 - command success, 1 - command error\n   * @param {object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {object} exitCode 0 - success, 1 - fail\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n  * Gets executed when a refresh happens.\n  * @param {string} oldSessionId session ID of the old session\n  * @param {string} newSessionId session ID of the new session\n  */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n  /**\n  * Hook that gets executed before a WebdriverIO assertion happens.\n  * @param {object} params information about the assertion to be executed\n  */\n  // beforeAssertion: function(params) {\n  // }\n  /**\n  * Hook that gets executed after a WebdriverIO assertion happened.\n  * @param {object} params information about the assertion that was executed, including its results\n  */\n  // afterAssertion: function(params) {\n  // }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["exports","config","runner","specs","exclude","maxInstances","capabilities","browserName","logLevel","bail","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","framework","reporters","outputDir","mochaOpts","require","ui","timeout","afterTest","test","context","error","result","duration","passed","retries","browser","takeScreenshot"],"sourceRoot":"C:\\Users\\t002404\\OneDrive - Cybozu\\デスクトップ\\Automation MailSource\\Nop-ecommerce\\WDIO_nopCommerce\\","sources":["wdio.conf.js"],"sourcesContent":["exports.config = {\n    //\n    // ====================\n    // Runner Configuration\n    // ====================\n    // WebdriverIO supports running e2e tests as well as unit and component tests.\n    runner: 'local',\n    //\n    // ==================\n    // Specify Test Files\n    // ==================\n    // Define which test specs should run. The pattern is relative to the directory\n    // of the configuration file being run.\n    //\n    // The specs are defined as an array of spec files (optionally using wildcards\n    // that will be expanded). The test for each spec file will be run in a separate\n    // worker process. In order to have a group of spec files run in the same worker\n    // process simply enclose them in an array within the specs array.\n    //\n    // The path of the spec files will be resolved relative from the directory of\n    // of the config file unless it's absolute.\n    //\n    specs: [\n        './src/test_specs/**/*.js'\n    ],\n    // Patterns to exclude.\n    exclude: [\n        // 'path/to/excluded/files'\n    ],\n    //\n    // ============\n    // Capabilities\n    // ============\n    // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n    // time. Depending on the number of capabilities, WebdriverIO launches several test\n    // sessions. Within your capabilities you can overwrite the spec and exclude options in\n    // order to group specific specs to a specific capability.\n    //\n    // First, you can define how many instances should be started at the same time. Let's\n    // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n    // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n    // files and you set maxInstances to 10, all spec files will get tested at the same time\n    // and 30 processes will get spawned. The property handles how many capabilities\n    // from the same test should run tests.\n    //\n    maxInstances: 10,\n    //\n    // If you have trouble getting all important capabilities together, check out the\n    // Sauce Labs platform configurator - a great tool to configure your capabilities:\n    // https://saucelabs.com/platform/platform-configurator\n    //\n    capabilities: [{\n        browserName: 'chrome'\n    }],\n\n    //\n    // ===================\n    // Test Configurations\n    // ===================\n    // Define all options that are relevant for the WebdriverIO instance here\n    //\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: 'info',\n    //\n    // Set specific log levels per logger\n    // loggers:\n    // - webdriver, webdriverio\n    // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n    // - @wdio/mocha-framework, @wdio/jasmine-framework\n    // - @wdio/local-runner\n    // - @wdio/sumologic-reporter\n    // - @wdio/cli, @wdio/config, @wdio/utils\n    // Level of logging verbosity: trace | debug | info | warn | error | silent\n    // logLevels: {\n    //     webdriver: 'info',\n    //     '@wdio/appium-service': 'info'\n    // },\n    //\n    // If you only want to run your tests until a specific amount of tests have failed use\n    // bail (default is 0 - don't bail, run all tests).\n    bail: 0,\n    //\n    // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n    // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n    // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n    // gets prepended directly.\n    baseUrl: 'https://demo.nopcommerce.com',\n    //\n    // Default timeout for all waitFor* commands.\n    waitforTimeout: 10000,\n    //\n    // Default timeout in milliseconds for request\n    // if browser driver or grid doesn't send response\n    connectionRetryTimeout: 120000,\n    //\n    // Default request retries count\n    connectionRetryCount: 3,\n    //\n    // Test runner services\n    // Services take over a specific job you don't want to take care of. They enhance\n    // your test setup with almost no effort. Unlike plugins, they don't add new\n    // commands. Instead, they hook themselves up into the test process.\n    // services: [],\n    //\n    // Framework you want to run your specs with.\n    // The following are supported: Mocha, Jasmine, and Cucumber\n    // see also: https://webdriver.io/docs/frameworks\n    //\n    // Make sure you have the wdio adapter package for the specific framework installed\n    // before running any tests.\n    framework: 'mocha',\n    \n    //\n    // The number of times to retry the entire specfile when it fails as a whole\n    // specFileRetries: 1,\n    //\n    // Delay in seconds between the spec file retry attempts\n    // specFileRetriesDelay: 0,\n    //\n    // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n    // specFileRetriesDeferred: false,\n    //\n    // Test reporter for stdout.\n    // The only one supported by default is 'dot'\n    // see also: https://webdriver.io/docs/dot-reporter\n    reporters: ['spec',['allure', {outputDir: 'allure-results'}]],\n\n    // Options to be passed to Mocha.\n    // See the full list at http://mochajs.org/\n    mochaOpts: {\n        require: ['@babel/register'],\n        ui: 'bdd',\n        timeout: 60000\n    },\n\n    //\n    // =====\n    // Hooks\n    // =====\n    // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n    // it and to build services around it. You can either apply a single function or an array of\n    // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n    // resolved to continue.\n    /**\n     * Gets executed once before all workers get launched.\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     */\n    // onPrepare: function (config, capabilities) {\n    // },\n    /**\n     * Gets executed before a worker process is spawned and can be used to initialize specific service\n     * for that worker as well as modify runtime environments in an async fashion.\n     * @param  {string} cid      capability id (e.g 0-0)\n     * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n     * @param  {object} specs    specs to be run in the worker process\n     * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n     * @param  {object} execArgv list of string arguments passed to the worker process\n     */\n    // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n    // },\n    /**\n     * Gets executed just after a worker process has exited.\n     * @param  {string} cid      capability id (e.g 0-0)\n     * @param  {number} exitCode 0 - success, 1 - fail\n     * @param  {object} specs    specs to be run in the worker process\n     * @param  {number} retries  number of retries used\n     */\n    // onWorkerEnd: function (cid, exitCode, specs, retries) {\n    // },\n    /**\n     * Gets executed just before initialising the webdriver session and test framework. It allows you\n     * to manipulate configurations depending on the capability or spec.\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that are to be run\n     * @param {string} cid worker id (e.g. 0-0)\n     */\n    // beforeSession: function (config, capabilities, specs, cid) {\n    // },\n    /**\n     * Gets executed before test execution begins. At this point you can access to all global\n     * variables like `browser`. It is the perfect place to define custom commands.\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs        List of spec file paths that are to be run\n     * @param {object}         browser      instance of created browser/device session\n     */\n    // before: function (capabilities, specs) {\n    // },\n    /**\n     * Runs before a WebdriverIO command gets executed.\n     * @param {string} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     */\n    // beforeCommand: function (commandName, args) {\n    // },\n    /**\n     * Hook that gets executed before the suite starts\n     * @param {object} suite suite details\n     */\n    // beforeSuite: function (suite) {\n    // },\n    /**\n     * Function to be executed before a test (in Mocha/Jasmine) starts.\n     */\n    // beforeTest: function (test, context) {\n    // },\n    /**\n     * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n     * beforeEach in Mocha)\n     */\n    // beforeHook: function (test, context, hookName) {\n    // },\n    /**\n     * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n     * afterEach in Mocha)\n     */\n    // afterHook: function (test, context, { error, result, duration, passed, retries }, hookName) {\n    // },\n    /**\n     * Function to be executed after a test (in Mocha/Jasmine only)\n     * @param {object}  test             test object\n     * @param {object}  context          scope object the test was executed with\n     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n     * @param {*}       result.result    return object of test function\n     * @param {number}  result.duration  duration of test\n     * @param {boolean} result.passed    true if test has passed, otherwise false\n     * @param {object}  result.retries   information about spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n     */\n    afterTest: async function(test, context, { error, result, duration, passed, retries }) {\n        if (!passed) {\n            await browser.takeScreenshot();\n        }\n    },\n\n\n    /**\n     * Hook that gets executed after the suite has ended\n     * @param {object} suite suite details\n     */\n    // afterSuite: function (suite) {\n    // },\n    /**\n     * Runs after a WebdriverIO command gets executed\n     * @param {string} commandName hook command name\n     * @param {Array} args arguments that command would receive\n     * @param {number} result 0 - command success, 1 - command error\n     * @param {object} error error object if any\n     */\n    // afterCommand: function (commandName, args, result, error) {\n    // },\n    /**\n     * Gets executed after all tests are done. You still have access to all global variables from\n     * the test.\n     * @param {number} result 0 - test pass, 1 - test fail\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // after: function (result, capabilities, specs) {\n    // },\n    /**\n     * Gets executed right after terminating the webdriver session.\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {Array.<String>} specs List of spec file paths that ran\n     */\n    // afterSession: function (config, capabilities, specs) {\n    // },\n    /**\n     * Gets executed after all workers got shut down and the process is about to exit. An error\n     * thrown in the onComplete hook will result in the test run failing.\n     * @param {object} exitCode 0 - success, 1 - fail\n     * @param {object} config wdio configuration object\n     * @param {Array.<Object>} capabilities list of capabilities details\n     * @param {<Object>} results object containing test results\n     */\n    // onComplete: function(exitCode, config, capabilities, results) {\n    // },\n    /**\n    * Gets executed when a refresh happens.\n    * @param {string} oldSessionId session ID of the old session\n    * @param {string} newSessionId session ID of the new session\n    */\n    // onReload: function(oldSessionId, newSessionId) {\n    // }\n    /**\n    * Hook that gets executed before a WebdriverIO assertion happens.\n    * @param {object} params information about the assertion to be executed\n    */\n    // beforeAssertion: function(params) {\n    // }\n    /**\n    * Hook that gets executed after a WebdriverIO assertion happened.\n    * @param {object} params information about the assertion that was executed, including its results\n    */\n    // afterAssertion: function(params) {\n    // }\n}\n"],"mappings":";;AAAAA,OAAO,CAACC,MAAM,GAAG;EACb;EACA;EACA;EACA;EACA;EACAC,MAAM,EAAE,OAAO;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,KAAK,EAAE,CACH,0BAA0B,CAC7B;EACD;EACAC,OAAO,EAAE;IACL;EAAA,CACH;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,EAAE;EAChB;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,CAAC;IACXC,WAAW,EAAE;EACjB,CAAC,CAAC;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,QAAQ,EAAE,MAAM;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAI,EAAE,CAAC;EACP;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE,8BAA8B;EACvC;EACA;EACAC,cAAc,EAAE,KAAK;EACrB;EACA;EACA;EACAC,sBAAsB,EAAE,MAAM;EAC9B;EACA;EACAC,oBAAoB,EAAE,CAAC;EACvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,OAAO;EAElB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,CAAC,MAAM,EAAC,CAAC,QAAQ,EAAE;IAACC,SAAS,EAAE;EAAgB,CAAC,CAAC,CAAC;EAE7D;EACA;EACAC,SAAS,EAAE;IACPC,OAAO,EAAE,CAAC,iBAAiB,CAAC;IAC5BC,EAAE,EAAE,KAAK;IACTC,OAAO,EAAE;EACb,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,SAAS,EAAE,eAAAA,CAAeC,IAAI,EAAEC,OAAO,EAAE;IAAEC,KAAK;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC;EAAQ,CAAC,EAAE;IACnF,IAAI,CAACD,MAAM,EAAE;MACT,MAAME,OAAO,CAACC,cAAc,CAAC,CAAC;IAClC;EACJ;;EAGA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;EACA;AACJ;AACA;AACA;EACI;EACA;AACJ,CAAC","ignoreList":[]}},"mtime":1713416894123}}